# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
commands:
  destroy_green:
    description: This command will delete the environment
    parameters:
      stack_name: 
        type: string
        default: "circleciaws"
    steps:
      - run: 
          name: delete cloudformation stack
          command: aws cloudformation delete-stack --stack-name circleciaws
          when_on: fail

orbs:
  aws-cli: circleci/aws-cli@1.4.0  
# Orchestrate or schedule a set of jobs
jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Make install
          command: |
            # Your code here
            cd nginx/
            make install
      - run:
          name: Lint dockerfile and html
          command: |
            # Your code here
            cd nginx/
            make lint

  build:
    machine: true
    steps:
      - checkout
      - run:
          name: build docker image and push it to docker hub
          command: |
            cd nginx/
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin 
            ./run_docker.sh

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: aws cloudformation create-stack --stack-name circleciaws --region us-east-1 --template-body file://EC2Instance-clf-template.yml
      - run: sleep 30
      - run: echo "[serve]" > inventory_ec2_instances_list.txt
      - run: sleep 20
      - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --region us-east-1
      - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --region us-east-1 >> inventory_ec2_instances_list.txt
      - save_cache:
          key: inventory_ec2_cap
          paths:
            - inventory_ec2_instances_list.txt

  configure_ec2:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - run: sleep 30
      - checkout
      - restore_cache:
          key: inventory_ec2_cap
      - run: cat inventory_ec2_instances_list.txt
      - add_ssh_keys:
          fingerprints: 4e:be:10:2c:f9:ab:28:60:a3:fd:51:3b:06:78:ec:cd
      - run:
          name: Install ansible dependencies
          command: |
            apk add --update ansible
      - run: 
          name: Configuring ec2 instance
          command: |
            ansible-playbook -i inventory_ec2_instances_list.txt main-remote.yml -vvv

workflows:
  # Name the workflow "welcome"
  capstone:
    # Run the welcome/run job in its own container
    jobs:
      - lint
      - build:
          requires: [lint]
      - create_infrastructure:
          requires: [build]
      - configure_ec2:
          requires: [create_infrastructure]
